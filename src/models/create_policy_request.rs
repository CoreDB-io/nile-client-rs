/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreatePolicyRequest {
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Box<crate::models::Subject>>,
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<crate::models::Resource>,
    /// The actions to be allowed on the resource if an access policy matches a request.  At least one action must be provided and executable actions (i.e: `read`, `write`) cannot be combined with non-executable actions (i.e: `deny`).  If multiple access policies match a request, policies with a `deny` action take precedence over policies with a `read` action. You can define `deny` access policies to make exceptions in your policies that allow access. 
    #[serde(rename = "actions")]
    pub actions: Vec<crate::models::Action>,
}

impl CreatePolicyRequest {
    pub fn new(actions: Vec<crate::models::Action>) -> CreatePolicyRequest {
        CreatePolicyRequest {
            subject: None,
            resource: None,
            actions,
        }
    }
}


