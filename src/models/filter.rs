/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Filter {
    /// Name of the metric to filter on
    #[serde(rename = "metric_name", skip_serializing_if = "Option::is_none")]
    pub metric_name: Option<String>,
    /// The Nile instance id to filter on
    #[serde(rename = "instance_id", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    /// The Nile entity type to filter on. This is ignored if entity_type is on a URL param.
    #[serde(rename = "entity_type", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<String>,
    /// The Nile organization id to filter on
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    /// The ISO-8601 formatted timestamp used to begin searching for matching metrics, i.e., 2018-11-13T20:20:39+00:00. If not provided the range will start from the epoch. Results returned are inclusive of this timestamp.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The duration is added to from_timestamp to limit the time range of the query. i.e., the query will be restricted to metric.timestamp >= from_timestamp AND metric.timestamp < from_timestamp + duration.  If not provided or the duration is <=0 then the end timestamp is set to now
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
}

impl Filter {
    pub fn new() -> Filter {
        Filter {
            metric_name: None,
            instance_id: None,
            entity_type: None,
            organization_id: None,
            start_time: None,
            duration: None,
        }
    }
}

use serde::{Deserialize, Serialize};
