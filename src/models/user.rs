/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "seq", skip_serializing_if = "Option::is_none")]
    pub seq: Option<i64>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// Arbitrary metadata.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "org_memberships", skip_serializing_if = "Option::is_none")]
    pub org_memberships: Option<::std::collections::HashMap<String, crate::models::OrgMembership>>,
    #[serde(rename = "email")]
    pub email: String,
}

impl User {
    pub fn new(r#type: RHashType, email: String) -> User {
        User {
            id: None,
            created: None,
            updated: None,
            seq: None,
            r#type,
            metadata: None,
            org_memberships: None,
            email,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "developer")]
    Developer,
    #[serde(rename = "service_account")]
    ServiceAccount,
    #[serde(rename = "nile_employee")]
    NileEmployee,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::User
    }
}

use serde::{Deserialize, Serialize};
