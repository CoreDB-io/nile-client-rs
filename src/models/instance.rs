/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Instance {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "seq", skip_serializing_if = "Option::is_none")]
    pub seq: Option<i64>,
    /// The entity type of this instance
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<String>,
    /// An *instance* of a JSON Schema
    #[serde(rename = "properties")]
    pub properties: serde_json::Value,
    /// The id of the organization that this instance belongs to
    #[serde(rename = "org")]
    pub org: String,
}

impl Instance {
    pub fn new(id: String, r#type: String, properties: serde_json::Value, org: String) -> Instance {
        Instance {
            id,
            created: None,
            updated: None,
            seq: None,
            r#type,
            deleted: None,
            properties,
            org,
        }
    }
}

use serde::{Deserialize, Serialize};
