/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AggregationRequest {
    /// The size of the bucket
    #[serde(rename = "bucket_size", skip_serializing_if = "Option::is_none")]
    pub bucket_size: Option<BucketSize>,
    /// Number of buckets to return. Defaults to 3 if not provided.
    #[serde(rename = "buckets", skip_serializing_if = "Option::is_none")]
    pub buckets: Option<i32>,
    /// An ISO-8601 formatted date-time, i.e., 2018-11-13T20:20:39+00:00, that the aggregation should start at. This time will be truncated based on bucket_size, i.e., if bucket_size is 1h, then the start_time will be truncated to the nearest hour.
    #[serde(rename = "start_time")]
    pub start_time: String,
    /// The Nile organization id to aggregate on
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    /// The optional Nile instance id to aggregate on
    #[serde(rename = "instance_id", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
}

impl AggregationRequest {
    pub fn new(start_time: String) -> AggregationRequest {
        AggregationRequest {
            bucket_size: None,
            buckets: None,
            start_time,
            organization_id: None,
            instance_id: None,
        }
    }
}

/// The size of the bucket
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BucketSize {
    #[serde(rename = "1h")]
    Variant1h,
    #[serde(rename = "1d")]
    Variant1d,
    #[serde(rename = "10m")]
    Variant10m,
}

impl Default for BucketSize {
    fn default() -> BucketSize {
        Self::Variant1h
    }
}

use serde::{Deserialize, Serialize};
