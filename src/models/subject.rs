/*
 * Nile API
 *
 * Making SaaS chill.
 *
 * The version of the OpenAPI document: 0.1.0-fdd7cd5
 * Contact: support@thenile.dev
 * Generated by: https://openapi-generator.tech
 */

/// Subject :   A subset of properties of a user to authorize against.    You can specify concrete values for subject properties   or use variables to match a subject property against a resource property.    An access policy with no resource (which matches all resources)   and the following subject would allow access to any resource with the same location as the subject:   ```   {     \"metadata\": {       \"location\": ${resource.properties.location}     }   }   ``` 



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Subject {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Arbitrary metadata.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "org_membership", skip_serializing_if = "Option::is_none")]
    pub org_membership: Option<Box<crate::models::SubjectOrgMembership>>,
}

impl Subject {
    ///   A subset of properties of a user to authorize against.    You can specify concrete values for subject properties   or use variables to match a subject property against a resource property.    An access policy with no resource (which matches all resources)   and the following subject would allow access to any resource with the same location as the subject:   ```   {     \"metadata\": {       \"location\": ${resource.properties.location}     }   }   ``` 
    pub fn new() -> Subject {
        Subject {
            id: None,
            email: None,
            metadata: None,
            org_membership: None,
        }
    }
}


